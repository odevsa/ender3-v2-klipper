######################################################################
# Printer Sounds
######################################################################

[gcode_macro PRESTART_SOUND]
gcode:
    M300 S500 P50
    G4 P200
    M300 S500 P50

[gcode_macro START_SOUND]
gcode:
    M300 S500 P50

[gcode_macro END_SOUND]
gcode:
    M300 S500 P250
    G4 P200
    M300 S500 P250
    G4 P200
    M300 S500 P250

[gcode_macro PAUSE_SOUND]
gcode:
    M300 S500 P1000
    G4 P500
    M300 S500 P1000

[gcode_macro RESUME_SOUND]
gcode:
    START_SOUND


######################################################################
# Start Print and End Print
######################################################################

# Replace the slicer's custom start and end g-code scripts with
# START_PRINT, END_PRINT and CANCEL_PRINT. See docs/Slicers.md for more information on using these macros.

[gcode_macro RETRACT_PARK]
gcode:
    G91
    {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
      G1 E-10 F6000
    {% endif %}
    G1 Z5 F500
    {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
      G1 E-40 F6000
    {% endif %}
    G90
    G1 X117.5 Y230 F2000
    G92 E0

[gcode_macro START_PRINT]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(200)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(60)|float %}
    
    M104 S150
    M140 S{BED_TEMP}
    G4 S10
    G90
    M83
    G28
    BED_MESH_PROFILE LOAD=default
    PRESTART_SOUND
    G1 X0 Y0 Z50 F2000
    M104 S{EXTRUDER_TEMP}
    M190 S{BED_TEMP}
    M109 S{EXTRUDER_TEMP}
    G92 E0
    G1 E50 F200 
    G1 Z0.28 F240
    G1 X200 E10 F1500
    G92 E0
    START_SOUND

[gcode_macro END_PRINT]
gcode:
    M140 S0
    M104 S0
    M106 S0
    RETRACT_PARK
    END_SOUND
    M84



[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    END_PRINT
    SDCARD_RESET_FILE
    BASE_CANCEL_PRINT

######################################################################
# Filament Change
######################################################################

# This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    {% set X = params.X|default(117.5)|float %}
    {% set Y = params.Y|default(230)|float %}
    {% set Z = params.Z|default(5)|float %}
    {% set E = params.E|default(50)|float %}

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={Z}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}

        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
        SAVE_GCODE_STATE NAME=PAUSE
        BASE_PAUSE
        RETRACT_PARK
        SAVE_GCODE_STATE NAME=PAUSEPARK
        PAUSE_SOUND
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set E = params.E|default(0)|float %}

    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
        {% if etemp > 0 %}
            M109 S{etemp|int}
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100
        G91
        M83
        G1 Y0 F2000
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 E55 F200
            G1 Z{zhop * -1} F900
        {% else %}
            G1 Z{zhop * -1} F900
        {% endif %}
        RESUME_SOUND
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60
        BASE_RESUME
    {% endif %}
    
[gcode_macro M600]
description: Pauses the current print.
  Usage: M600 [B<beeps>] [E<pos>] [L<pos>] [R<temp>] [U<pos>] [X<pos>] [Y<pos>]
              [Z<pos>]
gcode:
  PAUSE B="{0}" P=2{% for k in params|select("in", "EXYZ") %}{
      ' '~k~'="'~params[k]~'"'}{% endfor %}
  UNLOAD_FILAMENT{% if 'U' in params %} LENGTH={params.U}{% endif
               %} BEEPS="{params.B|default(10)|int}"
  {% if 'R' in params %}M109 S{params.R}{% endif %}

[gcode_macro M601]
description: Pauses the current print.
  Usage: M601
gcode:
  PAUSE

[gcode_macro M602]
description: Resumes the currently paused print.
  Usage: M602
gcode:
  RESUME

[gcode_macro M24]
rename_existing: M24.6245197
gcode:
  {% if printer.pause_resume.is_paused %}
  RESUME
  {% else %}
  M24.6245197
  {% endif %}

[gcode_macro M25]
rename_existing: M25.6245197
gcode:
  PAUSE

######################################################################
# Beeper
######################################################################

# M300 : Play tone. Beeper support, as commonly found on usual LCD
# displays (i.e. RepRapDiscount 2004 Smart Controller, RepRapDiscount
# 12864 Full Graphic). This defines a custom I/O pin and a custom
# GCODE macro.  Usage:
#   M300 [P<ms>] [S<Hz>]
#   P is the tone duration, S the tone frequency.
# The frequency won't be pitch perfect.

[gcode_macro M300]
gcode:
    {% set S = params.S|default(1000)|int %}
    {% set P = params.P|default(100)|int %}
    SET_PIN PIN=BEEPER_pin VALUE=0.5 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
    G4 P{P}
    SET_PIN PIN=BEEPER_pin VALUE=0

######################################################################
# Override M117 command with rawparams
######################################################################

# The macro below will override the default M117 command to echo the message.
#
# It uses the rawparams pseudo-variable that contains the full unparsed
# parameters that was passed to the M117 command.
#
# As this can include comments, we are trimming the text when a `;` or `#` is
# found, and escaping any existing `"`

[gcode_macro M117]
rename_existing: M117.1
gcode:
  {% if rawparams %}
    {% set escaped_msg = rawparams.split(';', 1)[0].split('\x23', 1)[0]|replace('"', '\\"') %}
    SET_DISPLAY_TEXT MSG="{escaped_msg}"
    RESPOND TYPE=command MSG="{escaped_msg}"
  {% else %}
    SET_DISPLAY_TEXT
  {% endif %}

# SDCard 'looping' (aka Marlin M808 commands) support
#
# Support SDCard looping
[sdcard_loop]

# 'Marlin' style M808 compatibility macro for SDCard looping
[gcode_macro M808]
gcode:
    {% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}
    {% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}
    {% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}

# Cancel object (aka Marlin/RRF M486 commands) support
#
# Enable object exclusion
[exclude_object]

[gcode_macro M486]
gcode:
  # Parameters known to M486 are as follows:
  #   [C<flag>] Cancel the current object
  #   [P<index>] Cancel the object with the given index
  #   [S<index>] Set the index of the current object.
  #       If the object with the given index has been canceled, this will cause
  #       the firmware to skip to the next object. The value -1 is used to
  #       indicate something that isn’t an object and shouldn’t be skipped.
  #   [T<count>] Reset the state and set the number of objects
  #   [U<index>] Un-cancel the object with the given index. This command will be
  #       ignored if the object has already been skipped

  {% if 'exclude_object' not in printer %}
    {action_raise_error("[exclude_object] is not enabled")}
  {% endif %}

  {% if 'T' in params %}
    EXCLUDE_OBJECT RESET=1

    {% for i in range(params.T | int) %}
      EXCLUDE_OBJECT_DEFINE NAME={i}
    {% endfor %}
  {% endif %}

  {% if 'C' in params %}
    EXCLUDE_OBJECT CURRENT=1
  {% endif %}

  {% if 'P' in params %}
    EXCLUDE_OBJECT NAME={params.P}
  {% endif %}

  {% if 'S' in params %}
    {% if params.S == '-1' %}
      {% if printer.exclude_object.current_object %}
        EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
      {% endif %}
    {% else %}
      EXCLUDE_OBJECT_START NAME={params.S}
    {% endif %}
  {% endif %}

  {% if 'U' in params %}
    EXCLUDE_OBJECT RESET=1 NAME={params.U}
  {% endif %}


######################################################################
# Set Pressure Advance
######################################################################
[gcode_macro M900] 
gcode:
    {% set PA = params.K|float %}
    SET_PRESSURE_ADVANCE ADVANCE={PA}
